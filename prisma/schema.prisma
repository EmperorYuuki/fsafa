// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  username        String    @unique
  email           String    @unique
  passwordHash    String
  displayName     String?
  bio             String?
  avatarUrl       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  stories         Story[]
  comments        Comment[]
  bookmarks       Bookmark[]
  readingProgress ReadingProgress[]
  preferences     UserPreference?
}

model UserPreference {
  id              String    @id @default(uuid())
  userId          String    @unique
  darkMode        Boolean   @default(false)
  fontSize        Int       @default(16)
  fontFamily      String    @default("Arial")
  emailNotifications Boolean @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Story {
  id              String    @id @default(uuid())
  title           String
  summary         String
  authorId        String
  coverImageUrl   String?
  isComplete      Boolean   @default(false)
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  author          User      @relation(fields: [authorId], references: [id])
  chapters        Chapter[]
  comments        Comment[]
  bookmarks       Bookmark[]
  readingProgress ReadingProgress[]
  tags            TagsOnStories[]
}

model Chapter {
  id              String    @id @default(uuid())
  title           String
  storyId         String
  chapterNumber   Int
  wordCount       Int       @default(0)
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  story           Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  paragraphs      Paragraph[]
  comments        Comment[]
  readingProgress ReadingProgress[]
}

model Paragraph {
  id              String    @id @default(uuid())
  chapterId       String
  content         String
  paragraphNumber Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  chapter         Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model Comment {
  id              String    @id @default(uuid())
  content         String
  authorId        String
  storyId         String?
  chapterId       String?
  parentCommentId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  story           Story?    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapter         Chapter?  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  parentComment   Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id], onDelete: SetNull)
  childComments   Comment[] @relation("CommentToComment")
}

model Bookmark {
  id              String    @id @default(uuid())
  userId          String
  storyId         String
  createdAt       DateTime  @default(now())
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  story           Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, storyId])
}

model ReadingProgress {
  id              String    @id @default(uuid())
  userId          String
  storyId         String
  chapterId       String?
  lastParagraphRead Int     @default(0)
  lastReadAt      DateTime  @default(now())
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  story           Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapter         Chapter?  @relation(fields: [chapterId], references: [id], onDelete: SetNull)
  
  @@unique([userId, storyId])
}

model Tag {
  id              String    @id @default(uuid())
  name            String    @unique
  description     String?
  createdAt       DateTime  @default(now())
  
  // Relations
  stories         TagsOnStories[]
}

model TagsOnStories {
  storyId         String
  tagId           String
  assignedAt      DateTime  @default(now())
  
  // Relations
  story           Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  tag             Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([storyId, tagId])
}} 
} 
